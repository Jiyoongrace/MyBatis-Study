<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

    <!-- driver properties 파일-->
    <properties resource="./driver.properties" />

    <!-- MyBatis setting에 대한 내용 -->
    <settings>
        <setting name="jdbcTypeForNull" value="NULL"/>
        <!-- 만약 MyBatis의 SQL Query(select)를 이용해서 처리했는데
        데이터베이스에서 가져온 내용이 없다면 Java 객체 NULL로 리턴한다. -->
    </settings>
    <!-- Alias를 설정할 수 있다. 여기서 설정하는 Alias(별칭)은 오직 XML에서만 사용된다.
    단순히 타이핑을 줄이기 위한 용도로 사용된다. -->
    <typeAliases>
        <typeAlias alias="BookVO" type="example.vo.BookVO" />
    </typeAliases>
    
    <!-- Database 연결에 대한 설정
    일반적으로 개발용, 운영용처럼 여러 개의 환경을 설정해놓고
    상황에 맞게 이용하는 방식을 사용한다. -->
    <environments default="development">
        <environment id="development">
            <!-- transactionManager는 type이 2개가 있다.
             JDBC라고 쓰면 수동으로 transaction을 관리한다는 의미
             MANAGED라고 쓰면 Container가 TR을 관리한다는 의미 -->
            <transactionManager type="JDBC">

            </transactionManager>

            <!-- dataSource 설정은 Connection Pool 설정하는 것이다.
            #{}이랑 ${}이랑 의미가 조금 다르다. -->
            <dataSource type="POOLED">
                <property name="driver" value="${driver}"/>
                <property name="url" value="${url}"/>
                <property name="username" value="${username}"/>
                <property name="password" value="${password}"/>
            </dataSource>
        </environment>
    </environments>

    <!-- 사용할 Mapper에 대한 설정이 나온다. -->
    <mappers>
        <mapper resource="./sqlmap/Book.xml" />
    </mappers>
</configuration>
